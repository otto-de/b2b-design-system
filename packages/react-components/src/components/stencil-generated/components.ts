'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type B2bBreadcrumbCustomEvent, type B2bCheckboxCustomEvent, type B2bCheckboxGroupCustomEvent, type B2bChipComponentCustomEvent, type B2bDatePickerCustomEvent, type B2bDatePickerDaysCustomEvent, type B2bDatePickerHeaderCustomEvent, type B2bDatePickerMonthsCustomEvent, type B2bDatePickerYearsCustomEvent, type B2bDropdownCustomEvent, type B2bFlyoutMenuOptionCustomEvent, type B2bInputCustomEvent, type B2bInputListCustomEvent, type B2bInputListOptionCustomEvent, type B2bModalCustomEvent, type B2bMultiselectOptionCustomEvent, type B2bPaginationCustomEvent, type B2bRadioButtonCustomEvent, type B2bRadioGroupCustomEvent, type B2bSearchCustomEvent, type B2bTabGroupCustomEvent, type B2bTableCustomEvent, type B2bTableHeaderCustomEvent, type B2bTableRowCustomEvent, type B2bTableRowgroupCustomEvent, type B2bTextareaCustomEvent, type B2bToggleButtonCustomEvent, type B2bToggleChipCustomEvent, type B2bToggleGroupCustomEvent, type B2bToggleSwitchCustomEvent, type BeforeCloseEventDetail, type BreadCrumbChangeEventDetail, type CheckboxEventDetail, type ChipComponentEventDetail, type ColumnSortChangeEventDetail, type DatePickerEventDetail, type DatePickerViewChangedEventDetail, type DateSelectedEventDetail, type EscapePressed, type InputChangeEvent, type InputClear, type MonthSelectedEventDetail, type MultiSelectOptionEventDetail, type NextMonth, type OptionSelectedEventDetail, type PageChangeEventDetail, type PreviousMonth, type RadioEventDetail, type SearchClickEventDetail, type TabChangeEventDetail, type TableAccordionSelectedEventDetail, type TableSortDirections, type ToggleButtonEventDetail, type ToggleChipEventDetail, type ToggleSwitchEventDetail, type YearSelectedEventDetail } from "@otto-de/b2b-core-components";
import { B2bAlert as B2bAlertElement, defineCustomElement as defineB2bAlert } from "@otto-de/b2b-core-components/dist/components/b2b-alert.js";
import { B2bAnchor as B2bAnchorElement, defineCustomElement as defineB2bAnchor } from "@otto-de/b2b-core-components/dist/components/b2b-anchor.js";
import { B2bBackgroundBox as B2bBackgroundBoxElement, defineCustomElement as defineB2bBackgroundBox } from "@otto-de/b2b-core-components/dist/components/b2b-background-box.js";
import { B2bBreadcrumbItem as B2bBreadcrumbItemElement, defineCustomElement as defineB2bBreadcrumbItem } from "@otto-de/b2b-core-components/dist/components/b2b-breadcrumb-item.js";
import { B2bBreadcrumb as B2bBreadcrumbElement, defineCustomElement as defineB2bBreadcrumb } from "@otto-de/b2b-core-components/dist/components/b2b-breadcrumb.js";
import { B2bButton as B2bButtonElement, defineCustomElement as defineB2bButton } from "@otto-de/b2b-core-components/dist/components/b2b-button.js";
import { B2bCard as B2bCardElement, defineCustomElement as defineB2bCard } from "@otto-de/b2b-core-components/dist/components/b2b-card.js";
import { B2bCheckboxGroup as B2bCheckboxGroupElement, defineCustomElement as defineB2bCheckboxGroup } from "@otto-de/b2b-core-components/dist/components/b2b-checkbox-group.js";
import { B2bCheckbox as B2bCheckboxElement, defineCustomElement as defineB2bCheckbox } from "@otto-de/b2b-core-components/dist/components/b2b-checkbox.js";
import { B2bChipComponent as B2bChipComponentElement, defineCustomElement as defineB2bChipComponent } from "@otto-de/b2b-core-components/dist/components/b2b-chip-component.js";
import { B2bDatePickerDaysHeader as B2bDatePickerDaysHeaderElement, defineCustomElement as defineB2bDatePickerDaysHeader } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker-days-header.js";
import { B2bDatePickerDays as B2bDatePickerDaysElement, defineCustomElement as defineB2bDatePickerDays } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker-days.js";
import { B2bDatePickerHeader as B2bDatePickerHeaderElement, defineCustomElement as defineB2bDatePickerHeader } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker-header.js";
import { B2bDatePickerMonths as B2bDatePickerMonthsElement, defineCustomElement as defineB2bDatePickerMonths } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker-months.js";
import { B2bDatePickerYears as B2bDatePickerYearsElement, defineCustomElement as defineB2bDatePickerYears } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker-years.js";
import { B2bDatePicker as B2bDatePickerElement, defineCustomElement as defineB2bDatePicker } from "@otto-de/b2b-core-components/dist/components/b2b-date-picker.js";
import { B2bDropdown as B2bDropdownElement, defineCustomElement as defineB2bDropdown } from "@otto-de/b2b-core-components/dist/components/b2b-dropdown.js";
import { B2bFlyoutMenuOption as B2bFlyoutMenuOptionElement, defineCustomElement as defineB2bFlyoutMenuOption } from "@otto-de/b2b-core-components/dist/components/b2b-flyout-menu-option.js";
import { B2bFlyoutMenu as B2bFlyoutMenuElement, defineCustomElement as defineB2bFlyoutMenu } from "@otto-de/b2b-core-components/dist/components/b2b-flyout-menu.js";
import { B2bGridCol as B2bGridColElement, defineCustomElement as defineB2bGridCol } from "@otto-de/b2b-core-components/dist/components/b2b-grid-col.js";
import { B2bGridRow as B2bGridRowElement, defineCustomElement as defineB2bGridRow } from "@otto-de/b2b-core-components/dist/components/b2b-grid-row.js";
import { B2bGrid as B2bGridElement, defineCustomElement as defineB2bGrid } from "@otto-de/b2b-core-components/dist/components/b2b-grid.js";
import { B2bHeadline as B2bHeadlineElement, defineCustomElement as defineB2bHeadline } from "@otto-de/b2b-core-components/dist/components/b2b-headline.js";
import { B2bIcon100 as B2bIcon100Element, defineCustomElement as defineB2bIcon100 } from "@otto-de/b2b-core-components/dist/components/b2b-icon-100.js";
import { B2bIcon50 as B2bIcon50Element, defineCustomElement as defineB2bIcon50 } from "@otto-de/b2b-core-components/dist/components/b2b-icon-50.js";
import { B2bIcon as B2bIconElement, defineCustomElement as defineB2bIcon } from "@otto-de/b2b-core-components/dist/components/b2b-icon.js";
import { B2bInputGroup as B2bInputGroupElement, defineCustomElement as defineB2bInputGroup } from "@otto-de/b2b-core-components/dist/components/b2b-input-group.js";
import { B2bInputLabel as B2bInputLabelElement, defineCustomElement as defineB2bInputLabel } from "@otto-de/b2b-core-components/dist/components/b2b-input-label.js";
import { B2bInputListOption as B2bInputListOptionElement, defineCustomElement as defineB2bInputListOption } from "@otto-de/b2b-core-components/dist/components/b2b-input-list-option.js";
import { B2bInputList as B2bInputListElement, defineCustomElement as defineB2bInputList } from "@otto-de/b2b-core-components/dist/components/b2b-input-list.js";
import { B2bInput as B2bInputElement, defineCustomElement as defineB2bInput } from "@otto-de/b2b-core-components/dist/components/b2b-input.js";
import { B2bLabel as B2bLabelElement, defineCustomElement as defineB2bLabel } from "@otto-de/b2b-core-components/dist/components/b2b-label.js";
import { B2bModal as B2bModalElement, defineCustomElement as defineB2bModal } from "@otto-de/b2b-core-components/dist/components/b2b-modal.js";
import { B2bMultiselectDropdown as B2bMultiselectDropdownElement, defineCustomElement as defineB2bMultiselectDropdown } from "@otto-de/b2b-core-components/dist/components/b2b-multiselect-dropdown.js";
import { B2bMultiselectOption as B2bMultiselectOptionElement, defineCustomElement as defineB2bMultiselectOption } from "@otto-de/b2b-core-components/dist/components/b2b-multiselect-option.js";
import { B2bPagination as B2bPaginationElement, defineCustomElement as defineB2bPagination } from "@otto-de/b2b-core-components/dist/components/b2b-pagination.js";
import { B2bParagraph as B2bParagraphElement, defineCustomElement as defineB2bParagraph } from "@otto-de/b2b-core-components/dist/components/b2b-paragraph.js";
import { B2bProgressBar as B2bProgressBarElement, defineCustomElement as defineB2bProgressBar } from "@otto-de/b2b-core-components/dist/components/b2b-progress-bar.js";
import { B2bRadioButton as B2bRadioButtonElement, defineCustomElement as defineB2bRadioButton } from "@otto-de/b2b-core-components/dist/components/b2b-radio-button.js";
import { B2bRadioGroup as B2bRadioGroupElement, defineCustomElement as defineB2bRadioGroup } from "@otto-de/b2b-core-components/dist/components/b2b-radio-group.js";
import { B2bRequiredSeparator as B2bRequiredSeparatorElement, defineCustomElement as defineB2bRequiredSeparator } from "@otto-de/b2b-core-components/dist/components/b2b-required-separator.js";
import { B2bRoundedIcon as B2bRoundedIconElement, defineCustomElement as defineB2bRoundedIcon } from "@otto-de/b2b-core-components/dist/components/b2b-rounded-icon.js";
import { B2bScrollableContainer as B2bScrollableContainerElement, defineCustomElement as defineB2bScrollableContainer } from "@otto-de/b2b-core-components/dist/components/b2b-scrollable-container.js";
import { B2bSearch as B2bSearchElement, defineCustomElement as defineB2bSearch } from "@otto-de/b2b-core-components/dist/components/b2b-search.js";
import { B2bSeparator as B2bSeparatorElement, defineCustomElement as defineB2bSeparator } from "@otto-de/b2b-core-components/dist/components/b2b-separator.js";
import { B2bShimmer as B2bShimmerElement, defineCustomElement as defineB2bShimmer } from "@otto-de/b2b-core-components/dist/components/b2b-shimmer.js";
import { B2bSnackbar as B2bSnackbarElement, defineCustomElement as defineB2bSnackbar } from "@otto-de/b2b-core-components/dist/components/b2b-snackbar.js";
import { B2bSpinner as B2bSpinnerElement, defineCustomElement as defineB2bSpinner } from "@otto-de/b2b-core-components/dist/components/b2b-spinner.js";
import { B2bTabGroup as B2bTabGroupElement, defineCustomElement as defineB2bTabGroup } from "@otto-de/b2b-core-components/dist/components/b2b-tab-group.js";
import { B2bTabPanel as B2bTabPanelElement, defineCustomElement as defineB2bTabPanel } from "@otto-de/b2b-core-components/dist/components/b2b-tab-panel.js";
import { B2bTab as B2bTabElement, defineCustomElement as defineB2bTab } from "@otto-de/b2b-core-components/dist/components/b2b-tab.js";
import { B2bTableCell as B2bTableCellElement, defineCustomElement as defineB2bTableCell } from "@otto-de/b2b-core-components/dist/components/b2b-table-cell.js";
import { B2bTableHeader as B2bTableHeaderElement, defineCustomElement as defineB2bTableHeader } from "@otto-de/b2b-core-components/dist/components/b2b-table-header.js";
import { B2bTableRow as B2bTableRowElement, defineCustomElement as defineB2bTableRow } from "@otto-de/b2b-core-components/dist/components/b2b-table-row.js";
import { B2bTableRowgroup as B2bTableRowgroupElement, defineCustomElement as defineB2bTableRowgroup } from "@otto-de/b2b-core-components/dist/components/b2b-table-rowgroup.js";
import { B2bTable as B2bTableElement, defineCustomElement as defineB2bTable } from "@otto-de/b2b-core-components/dist/components/b2b-table.js";
import { B2bTextarea as B2bTextareaElement, defineCustomElement as defineB2bTextarea } from "@otto-de/b2b-core-components/dist/components/b2b-textarea.js";
import { B2bToggleButton as B2bToggleButtonElement, defineCustomElement as defineB2bToggleButton } from "@otto-de/b2b-core-components/dist/components/b2b-toggle-button.js";
import { B2bToggleChip as B2bToggleChipElement, defineCustomElement as defineB2bToggleChip } from "@otto-de/b2b-core-components/dist/components/b2b-toggle-chip.js";
import { B2bToggleGroup as B2bToggleGroupElement, defineCustomElement as defineB2bToggleGroup } from "@otto-de/b2b-core-components/dist/components/b2b-toggle-group.js";
import { B2bToggleSwitch as B2bToggleSwitchElement, defineCustomElement as defineB2bToggleSwitch } from "@otto-de/b2b-core-components/dist/components/b2b-toggle-switch.js";
import { B2bTooltip as B2bTooltipElement, defineCustomElement as defineB2bTooltip } from "@otto-de/b2b-core-components/dist/components/b2b-tooltip.js";
import { B2bWizardIcon as B2bWizardIconElement, defineCustomElement as defineB2bWizardIcon } from "@otto-de/b2b-core-components/dist/components/b2b-wizard-icon.js";
import { B2bWizardStep as B2bWizardStepElement, defineCustomElement as defineB2bWizardStep } from "@otto-de/b2b-core-components/dist/components/b2b-wizard-step.js";
import { B2bWizard as B2bWizardElement, defineCustomElement as defineB2bWizard } from "@otto-de/b2b-core-components/dist/components/b2b-wizard.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type B2bAlertEvents = { onB2bClose: EventName<CustomEvent<void>> };

export const B2bAlert: StencilReactComponent<B2bAlertElement, B2bAlertEvents> = /*@__PURE__*/ createComponent<B2bAlertElement, B2bAlertEvents>({
    tagName: 'b2b-alert',
    elementClass: B2bAlertElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bClose: 'b2b-close' } as B2bAlertEvents,
    defineCustomElement: defineB2bAlert
});

type B2bAnchorEvents = NonNullable<unknown>;

export const B2bAnchor: StencilReactComponent<B2bAnchorElement, B2bAnchorEvents> = /*@__PURE__*/ createComponent<B2bAnchorElement, B2bAnchorEvents>({
    tagName: 'b2b-anchor',
    elementClass: B2bAnchorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bAnchorEvents,
    defineCustomElement: defineB2bAnchor
});

type B2bBackgroundBoxEvents = NonNullable<unknown>;

export const B2bBackgroundBox: StencilReactComponent<B2bBackgroundBoxElement, B2bBackgroundBoxEvents> = /*@__PURE__*/ createComponent<B2bBackgroundBoxElement, B2bBackgroundBoxEvents>({
    tagName: 'b2b-background-box',
    elementClass: B2bBackgroundBoxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bBackgroundBoxEvents,
    defineCustomElement: defineB2bBackgroundBox
});

type B2bBreadcrumbEvents = { onB2bSelected: EventName<B2bBreadcrumbCustomEvent<BreadCrumbChangeEventDetail>> };

export const B2bBreadcrumb: StencilReactComponent<B2bBreadcrumbElement, B2bBreadcrumbEvents> = /*@__PURE__*/ createComponent<B2bBreadcrumbElement, B2bBreadcrumbEvents>({
    tagName: 'b2b-breadcrumb',
    elementClass: B2bBreadcrumbElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bBreadcrumbEvents,
    defineCustomElement: defineB2bBreadcrumb
});

type B2bBreadcrumbItemEvents = NonNullable<unknown>;

export const B2bBreadcrumbItem: StencilReactComponent<B2bBreadcrumbItemElement, B2bBreadcrumbItemEvents> = /*@__PURE__*/ createComponent<B2bBreadcrumbItemElement, B2bBreadcrumbItemEvents>({
    tagName: 'b2b-breadcrumb-item',
    elementClass: B2bBreadcrumbItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bBreadcrumbItemEvents,
    defineCustomElement: defineB2bBreadcrumbItem
});

type B2bButtonEvents = NonNullable<unknown>;

export const B2bButton: StencilReactComponent<B2bButtonElement, B2bButtonEvents> = /*@__PURE__*/ createComponent<B2bButtonElement, B2bButtonEvents>({
    tagName: 'b2b-button',
    elementClass: B2bButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bButtonEvents,
    defineCustomElement: defineB2bButton
});

type B2bCardEvents = { onB2bSelected: EventName<CustomEvent<void>> };

export const B2bCard: StencilReactComponent<B2bCardElement, B2bCardEvents> = /*@__PURE__*/ createComponent<B2bCardElement, B2bCardEvents>({
    tagName: 'b2b-card',
    elementClass: B2bCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bCardEvents,
    defineCustomElement: defineB2bCard
});

type B2bCheckboxEvents = {
    onB2bFocus: EventName<B2bCheckboxCustomEvent<FocusEvent>>,
    onB2bBlur: EventName<B2bCheckboxCustomEvent<FocusEvent>>,
    onB2bChange: EventName<B2bCheckboxCustomEvent<CheckboxEventDetail>>
};

export const B2bCheckbox: StencilReactComponent<B2bCheckboxElement, B2bCheckboxEvents> = /*@__PURE__*/ createComponent<B2bCheckboxElement, B2bCheckboxEvents>({
    tagName: 'b2b-checkbox',
    elementClass: B2bCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bFocus: 'b2b-focus',
        onB2bBlur: 'b2b-blur',
        onB2bChange: 'b2b-change'
    } as B2bCheckboxEvents,
    defineCustomElement: defineB2bCheckbox
});

type B2bCheckboxGroupEvents = { onB2bGroupChange: EventName<B2bCheckboxGroupCustomEvent<CheckboxEventDetail>> };

export const B2bCheckboxGroup: StencilReactComponent<B2bCheckboxGroupElement, B2bCheckboxGroupEvents> = /*@__PURE__*/ createComponent<B2bCheckboxGroupElement, B2bCheckboxGroupEvents>({
    tagName: 'b2b-checkbox-group',
    elementClass: B2bCheckboxGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bGroupChange: 'b2b-group-change' } as B2bCheckboxGroupEvents,
    defineCustomElement: defineB2bCheckboxGroup
});

type B2bChipComponentEvents = { onB2bClose: EventName<B2bChipComponentCustomEvent<ChipComponentEventDetail>> };

export const B2bChipComponent: StencilReactComponent<B2bChipComponentElement, B2bChipComponentEvents> = /*@__PURE__*/ createComponent<B2bChipComponentElement, B2bChipComponentEvents>({
    tagName: 'b2b-chip-component',
    elementClass: B2bChipComponentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bClose: 'b2b-close' } as B2bChipComponentEvents,
    defineCustomElement: defineB2bChipComponent
});

type B2bDatePickerEvents = { onB2bSelected: EventName<B2bDatePickerCustomEvent<DatePickerEventDetail>> };

export const B2bDatePicker: StencilReactComponent<B2bDatePickerElement, B2bDatePickerEvents> = /*@__PURE__*/ createComponent<B2bDatePickerElement, B2bDatePickerEvents>({
    tagName: 'b2b-date-picker',
    elementClass: B2bDatePickerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bDatePickerEvents,
    defineCustomElement: defineB2bDatePicker
});

type B2bDatePickerDaysEvents = {
    onB2bDatePickerEscape: EventName<B2bDatePickerDaysCustomEvent<EscapePressed>>,
    onB2bDateSelected: EventName<B2bDatePickerDaysCustomEvent<DateSelectedEventDetail>>
};

export const B2bDatePickerDays: StencilReactComponent<B2bDatePickerDaysElement, B2bDatePickerDaysEvents> = /*@__PURE__*/ createComponent<B2bDatePickerDaysElement, B2bDatePickerDaysEvents>({
    tagName: 'b2b-date-picker-days',
    elementClass: B2bDatePickerDaysElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bDatePickerEscape: 'b2b-date-picker-escape',
        onB2bDateSelected: 'b2b-date-selected'
    } as B2bDatePickerDaysEvents,
    defineCustomElement: defineB2bDatePickerDays
});

type B2bDatePickerDaysHeaderEvents = NonNullable<unknown>;

export const B2bDatePickerDaysHeader: StencilReactComponent<B2bDatePickerDaysHeaderElement, B2bDatePickerDaysHeaderEvents> = /*@__PURE__*/ createComponent<B2bDatePickerDaysHeaderElement, B2bDatePickerDaysHeaderEvents>({
    tagName: 'b2b-date-picker-days-header',
    elementClass: B2bDatePickerDaysHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bDatePickerDaysHeaderEvents,
    defineCustomElement: defineB2bDatePickerDaysHeader
});

type B2bDatePickerHeaderEvents = {
    onB2bDatePickerPreviousMonth: EventName<B2bDatePickerHeaderCustomEvent<PreviousMonth>>,
    onB2bDatePickerNextMonth: EventName<B2bDatePickerHeaderCustomEvent<NextMonth>>,
    onB2bDatePickerViewChanged: EventName<B2bDatePickerHeaderCustomEvent<DatePickerViewChangedEventDetail>>
};

export const B2bDatePickerHeader: StencilReactComponent<B2bDatePickerHeaderElement, B2bDatePickerHeaderEvents> = /*@__PURE__*/ createComponent<B2bDatePickerHeaderElement, B2bDatePickerHeaderEvents>({
    tagName: 'b2b-date-picker-header',
    elementClass: B2bDatePickerHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bDatePickerPreviousMonth: 'b2b-date-picker-previous-month',
        onB2bDatePickerNextMonth: 'b2b-date-picker-next-month',
        onB2bDatePickerViewChanged: 'b2b-date-picker-view-changed'
    } as B2bDatePickerHeaderEvents,
    defineCustomElement: defineB2bDatePickerHeader
});

type B2bDatePickerMonthsEvents = { onB2bDatePickerMonthSelected: EventName<B2bDatePickerMonthsCustomEvent<MonthSelectedEventDetail>> };

export const B2bDatePickerMonths: StencilReactComponent<B2bDatePickerMonthsElement, B2bDatePickerMonthsEvents> = /*@__PURE__*/ createComponent<B2bDatePickerMonthsElement, B2bDatePickerMonthsEvents>({
    tagName: 'b2b-date-picker-months',
    elementClass: B2bDatePickerMonthsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bDatePickerMonthSelected: 'b2b-date-picker-month-selected' } as B2bDatePickerMonthsEvents,
    defineCustomElement: defineB2bDatePickerMonths
});

type B2bDatePickerYearsEvents = { onB2bDatePickerYearSelected: EventName<B2bDatePickerYearsCustomEvent<YearSelectedEventDetail>> };

export const B2bDatePickerYears: StencilReactComponent<B2bDatePickerYearsElement, B2bDatePickerYearsEvents> = /*@__PURE__*/ createComponent<B2bDatePickerYearsElement, B2bDatePickerYearsEvents>({
    tagName: 'b2b-date-picker-years',
    elementClass: B2bDatePickerYearsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bDatePickerYearSelected: 'b2b-date-picker-year-selected' } as B2bDatePickerYearsEvents,
    defineCustomElement: defineB2bDatePickerYears
});

type B2bDropdownEvents = {
    onB2bChange: EventName<CustomEvent<string>>,
    onB2bFocus: EventName<B2bDropdownCustomEvent<FocusEvent>>,
    onB2bBlur: EventName<B2bDropdownCustomEvent<FocusEvent>>
};

export const B2bDropdown: StencilReactComponent<B2bDropdownElement, B2bDropdownEvents> = /*@__PURE__*/ createComponent<B2bDropdownElement, B2bDropdownEvents>({
    tagName: 'b2b-dropdown',
    elementClass: B2bDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bChange: 'b2b-change',
        onB2bFocus: 'b2b-focus',
        onB2bBlur: 'b2b-blur'
    } as B2bDropdownEvents,
    defineCustomElement: defineB2bDropdown
});

type B2bFlyoutMenuEvents = NonNullable<unknown>;

export const B2bFlyoutMenu: StencilReactComponent<B2bFlyoutMenuElement, B2bFlyoutMenuEvents> = /*@__PURE__*/ createComponent<B2bFlyoutMenuElement, B2bFlyoutMenuEvents>({
    tagName: 'b2b-flyout-menu',
    elementClass: B2bFlyoutMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bFlyoutMenuEvents,
    defineCustomElement: defineB2bFlyoutMenu
});

type B2bFlyoutMenuOptionEvents = { onB2bOptionSelected: EventName<B2bFlyoutMenuOptionCustomEvent<OptionSelectedEventDetail>> };

export const B2bFlyoutMenuOption: StencilReactComponent<B2bFlyoutMenuOptionElement, B2bFlyoutMenuOptionEvents> = /*@__PURE__*/ createComponent<B2bFlyoutMenuOptionElement, B2bFlyoutMenuOptionEvents>({
    tagName: 'b2b-flyout-menu-option',
    elementClass: B2bFlyoutMenuOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bOptionSelected: 'b2b-option-selected' } as B2bFlyoutMenuOptionEvents,
    defineCustomElement: defineB2bFlyoutMenuOption
});

type B2bGridEvents = NonNullable<unknown>;

export const B2bGrid: StencilReactComponent<B2bGridElement, B2bGridEvents> = /*@__PURE__*/ createComponent<B2bGridElement, B2bGridEvents>({
    tagName: 'b2b-grid',
    elementClass: B2bGridElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bGridEvents,
    defineCustomElement: defineB2bGrid
});

type B2bGridColEvents = NonNullable<unknown>;

export const B2bGridCol: StencilReactComponent<B2bGridColElement, B2bGridColEvents> = /*@__PURE__*/ createComponent<B2bGridColElement, B2bGridColEvents>({
    tagName: 'b2b-grid-col',
    elementClass: B2bGridColElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bGridColEvents,
    defineCustomElement: defineB2bGridCol
});

type B2bGridRowEvents = NonNullable<unknown>;

export const B2bGridRow: StencilReactComponent<B2bGridRowElement, B2bGridRowEvents> = /*@__PURE__*/ createComponent<B2bGridRowElement, B2bGridRowEvents>({
    tagName: 'b2b-grid-row',
    elementClass: B2bGridRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bGridRowEvents,
    defineCustomElement: defineB2bGridRow
});

type B2bHeadlineEvents = NonNullable<unknown>;

export const B2bHeadline: StencilReactComponent<B2bHeadlineElement, B2bHeadlineEvents> = /*@__PURE__*/ createComponent<B2bHeadlineElement, B2bHeadlineEvents>({
    tagName: 'b2b-headline',
    elementClass: B2bHeadlineElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bHeadlineEvents,
    defineCustomElement: defineB2bHeadline
});

type B2bIconEvents = NonNullable<unknown>;

export const B2bIcon: StencilReactComponent<B2bIconElement, B2bIconEvents> = /*@__PURE__*/ createComponent<B2bIconElement, B2bIconEvents>({
    tagName: 'b2b-icon',
    elementClass: B2bIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bIconEvents,
    defineCustomElement: defineB2bIcon
});

type B2bIcon100Events = NonNullable<unknown>;

export const B2bIcon100: StencilReactComponent<B2bIcon100Element, B2bIcon100Events> = /*@__PURE__*/ createComponent<B2bIcon100Element, B2bIcon100Events>({
    tagName: 'b2b-icon-100',
    elementClass: B2bIcon100Element,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bIcon100Events,
    defineCustomElement: defineB2bIcon100
});

type B2bIcon50Events = NonNullable<unknown>;

export const B2bIcon50: StencilReactComponent<B2bIcon50Element, B2bIcon50Events> = /*@__PURE__*/ createComponent<B2bIcon50Element, B2bIcon50Events>({
    tagName: 'b2b-icon-50',
    elementClass: B2bIcon50Element,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bIcon50Events,
    defineCustomElement: defineB2bIcon50
});

type B2bInputEvents = {
    onB2bFocus: EventName<B2bInputCustomEvent<FocusEvent>>,
    onB2bBlur: EventName<B2bInputCustomEvent<FocusEvent>>,
    onB2bInput: EventName<B2bInputCustomEvent<InputChangeEvent>>
};

export const B2bInput: StencilReactComponent<B2bInputElement, B2bInputEvents> = /*@__PURE__*/ createComponent<B2bInputElement, B2bInputEvents>({
    tagName: 'b2b-input',
    elementClass: B2bInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bFocus: 'b2b-focus',
        onB2bBlur: 'b2b-blur',
        onB2bInput: 'b2b-input'
    } as B2bInputEvents,
    defineCustomElement: defineB2bInput
});

type B2bInputGroupEvents = NonNullable<unknown>;

export const B2bInputGroup: StencilReactComponent<B2bInputGroupElement, B2bInputGroupEvents> = /*@__PURE__*/ createComponent<B2bInputGroupElement, B2bInputGroupEvents>({
    tagName: 'b2b-input-group',
    elementClass: B2bInputGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bInputGroupEvents,
    defineCustomElement: defineB2bInputGroup
});

type B2bInputLabelEvents = NonNullable<unknown>;

export const B2bInputLabel: StencilReactComponent<B2bInputLabelElement, B2bInputLabelEvents> = /*@__PURE__*/ createComponent<B2bInputLabelElement, B2bInputLabelEvents>({
    tagName: 'b2b-input-label',
    elementClass: B2bInputLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bInputLabelEvents,
    defineCustomElement: defineB2bInputLabel
});

type B2bInputListEvents = { onB2bClear: EventName<B2bInputListCustomEvent<InputClear>> };

export const B2bInputList: StencilReactComponent<B2bInputListElement, B2bInputListEvents> = /*@__PURE__*/ createComponent<B2bInputListElement, B2bInputListEvents>({
    tagName: 'b2b-input-list',
    elementClass: B2bInputListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bClear: 'b2b-clear' } as B2bInputListEvents,
    defineCustomElement: defineB2bInputList
});

type B2bInputListOptionEvents = { onB2bOptionSelected: EventName<B2bInputListOptionCustomEvent<OptionSelectedEventDetail>> };

export const B2bInputListOption: StencilReactComponent<B2bInputListOptionElement, B2bInputListOptionEvents> = /*@__PURE__*/ createComponent<B2bInputListOptionElement, B2bInputListOptionEvents>({
    tagName: 'b2b-input-list-option',
    elementClass: B2bInputListOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bOptionSelected: 'b2b-option-selected' } as B2bInputListOptionEvents,
    defineCustomElement: defineB2bInputListOption
});

type B2bLabelEvents = NonNullable<unknown>;

export const B2bLabel: StencilReactComponent<B2bLabelElement, B2bLabelEvents> = /*@__PURE__*/ createComponent<B2bLabelElement, B2bLabelEvents>({
    tagName: 'b2b-label',
    elementClass: B2bLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bLabelEvents,
    defineCustomElement: defineB2bLabel
});

type B2bModalEvents = {
    onB2bClose: EventName<CustomEvent<void>>,
    onB2bBeforeClose: EventName<B2bModalCustomEvent<BeforeCloseEventDetail>>
};

export const B2bModal: StencilReactComponent<B2bModalElement, B2bModalEvents> = /*@__PURE__*/ createComponent<B2bModalElement, B2bModalEvents>({
    tagName: 'b2b-modal',
    elementClass: B2bModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bClose: 'b2b-close',
        onB2bBeforeClose: 'b2b-before-close'
    } as B2bModalEvents,
    defineCustomElement: defineB2bModal
});

type B2bMultiselectDropdownEvents = { onB2bSelected: EventName<CustomEvent<string[]>> };

export const B2bMultiselectDropdown: StencilReactComponent<B2bMultiselectDropdownElement, B2bMultiselectDropdownEvents> = /*@__PURE__*/ createComponent<B2bMultiselectDropdownElement, B2bMultiselectDropdownEvents>({
    tagName: 'b2b-multiselect-dropdown',
    elementClass: B2bMultiselectDropdownElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bMultiselectDropdownEvents,
    defineCustomElement: defineB2bMultiselectDropdown
});

type B2bMultiselectOptionEvents = { onB2bOptionSelected: EventName<B2bMultiselectOptionCustomEvent<MultiSelectOptionEventDetail>> };

export const B2bMultiselectOption: StencilReactComponent<B2bMultiselectOptionElement, B2bMultiselectOptionEvents> = /*@__PURE__*/ createComponent<B2bMultiselectOptionElement, B2bMultiselectOptionEvents>({
    tagName: 'b2b-multiselect-option',
    elementClass: B2bMultiselectOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bOptionSelected: 'b2b-option-selected' } as B2bMultiselectOptionEvents,
    defineCustomElement: defineB2bMultiselectOption
});

type B2bPaginationEvents = { onB2bPageChange: EventName<B2bPaginationCustomEvent<PageChangeEventDetail>> };

export const B2bPagination: StencilReactComponent<B2bPaginationElement, B2bPaginationEvents> = /*@__PURE__*/ createComponent<B2bPaginationElement, B2bPaginationEvents>({
    tagName: 'b2b-pagination',
    elementClass: B2bPaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bPageChange: 'b2b-page-change' } as B2bPaginationEvents,
    defineCustomElement: defineB2bPagination
});

type B2bParagraphEvents = NonNullable<unknown>;

export const B2bParagraph: StencilReactComponent<B2bParagraphElement, B2bParagraphEvents> = /*@__PURE__*/ createComponent<B2bParagraphElement, B2bParagraphEvents>({
    tagName: 'b2b-paragraph',
    elementClass: B2bParagraphElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bParagraphEvents,
    defineCustomElement: defineB2bParagraph
});

type B2bProgressBarEvents = NonNullable<unknown>;

export const B2bProgressBar: StencilReactComponent<B2bProgressBarElement, B2bProgressBarEvents> = /*@__PURE__*/ createComponent<B2bProgressBarElement, B2bProgressBarEvents>({
    tagName: 'b2b-progress-bar',
    elementClass: B2bProgressBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bProgressBarEvents,
    defineCustomElement: defineB2bProgressBar
});

type B2bRadioButtonEvents = {
    onB2bFocus: EventName<B2bRadioButtonCustomEvent<FocusEvent>>,
    onB2bBlur: EventName<B2bRadioButtonCustomEvent<FocusEvent>>,
    onB2bChange: EventName<B2bRadioButtonCustomEvent<RadioEventDetail>>
};

export const B2bRadioButton: StencilReactComponent<B2bRadioButtonElement, B2bRadioButtonEvents> = /*@__PURE__*/ createComponent<B2bRadioButtonElement, B2bRadioButtonEvents>({
    tagName: 'b2b-radio-button',
    elementClass: B2bRadioButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bFocus: 'b2b-focus',
        onB2bBlur: 'b2b-blur',
        onB2bChange: 'b2b-change'
    } as B2bRadioButtonEvents,
    defineCustomElement: defineB2bRadioButton
});

type B2bRadioGroupEvents = { onB2bGroupChange: EventName<B2bRadioGroupCustomEvent<RadioEventDetail>> };

export const B2bRadioGroup: StencilReactComponent<B2bRadioGroupElement, B2bRadioGroupEvents> = /*@__PURE__*/ createComponent<B2bRadioGroupElement, B2bRadioGroupEvents>({
    tagName: 'b2b-radio-group',
    elementClass: B2bRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bGroupChange: 'b2b-group-change' } as B2bRadioGroupEvents,
    defineCustomElement: defineB2bRadioGroup
});

type B2bRequiredSeparatorEvents = NonNullable<unknown>;

export const B2bRequiredSeparator: StencilReactComponent<B2bRequiredSeparatorElement, B2bRequiredSeparatorEvents> = /*@__PURE__*/ createComponent<B2bRequiredSeparatorElement, B2bRequiredSeparatorEvents>({
    tagName: 'b2b-required-separator',
    elementClass: B2bRequiredSeparatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bRequiredSeparatorEvents,
    defineCustomElement: defineB2bRequiredSeparator
});

type B2bRoundedIconEvents = NonNullable<unknown>;

export const B2bRoundedIcon: StencilReactComponent<B2bRoundedIconElement, B2bRoundedIconEvents> = /*@__PURE__*/ createComponent<B2bRoundedIconElement, B2bRoundedIconEvents>({
    tagName: 'b2b-rounded-icon',
    elementClass: B2bRoundedIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bRoundedIconEvents,
    defineCustomElement: defineB2bRoundedIcon
});

type B2bScrollableContainerEvents = NonNullable<unknown>;

export const B2bScrollableContainer: StencilReactComponent<B2bScrollableContainerElement, B2bScrollableContainerEvents> = /*@__PURE__*/ createComponent<B2bScrollableContainerElement, B2bScrollableContainerEvents>({
    tagName: 'b2b-scrollable-container',
    elementClass: B2bScrollableContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bScrollableContainerEvents,
    defineCustomElement: defineB2bScrollableContainer
});

type B2bSearchEvents = { onB2bSearch: EventName<B2bSearchCustomEvent<SearchClickEventDetail>> };

export const B2bSearch: StencilReactComponent<B2bSearchElement, B2bSearchEvents> = /*@__PURE__*/ createComponent<B2bSearchElement, B2bSearchEvents>({
    tagName: 'b2b-search',
    elementClass: B2bSearchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSearch: 'b2b-search' } as B2bSearchEvents,
    defineCustomElement: defineB2bSearch
});

type B2bSeparatorEvents = NonNullable<unknown>;

export const B2bSeparator: StencilReactComponent<B2bSeparatorElement, B2bSeparatorEvents> = /*@__PURE__*/ createComponent<B2bSeparatorElement, B2bSeparatorEvents>({
    tagName: 'b2b-separator',
    elementClass: B2bSeparatorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bSeparatorEvents,
    defineCustomElement: defineB2bSeparator
});

type B2bShimmerEvents = NonNullable<unknown>;

export const B2bShimmer: StencilReactComponent<B2bShimmerElement, B2bShimmerEvents> = /*@__PURE__*/ createComponent<B2bShimmerElement, B2bShimmerEvents>({
    tagName: 'b2b-shimmer',
    elementClass: B2bShimmerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bShimmerEvents,
    defineCustomElement: defineB2bShimmer
});

type B2bSnackbarEvents = {
    onB2bClose: EventName<CustomEvent<void>>,
    onB2bActionClick: EventName<CustomEvent<void>>
};

export const B2bSnackbar: StencilReactComponent<B2bSnackbarElement, B2bSnackbarEvents> = /*@__PURE__*/ createComponent<B2bSnackbarElement, B2bSnackbarEvents>({
    tagName: 'b2b-snackbar',
    elementClass: B2bSnackbarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bClose: 'b2b-close',
        onB2bActionClick: 'b2b-action-click'
    } as B2bSnackbarEvents,
    defineCustomElement: defineB2bSnackbar
});

type B2bSpinnerEvents = NonNullable<unknown>;

export const B2bSpinner: StencilReactComponent<B2bSpinnerElement, B2bSpinnerEvents> = /*@__PURE__*/ createComponent<B2bSpinnerElement, B2bSpinnerEvents>({
    tagName: 'b2b-spinner',
    elementClass: B2bSpinnerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bSpinnerEvents,
    defineCustomElement: defineB2bSpinner
});

type B2bTabEvents = { onB2bChange: EventName<CustomEvent<boolean>> };

export const B2bTab: StencilReactComponent<B2bTabElement, B2bTabEvents> = /*@__PURE__*/ createComponent<B2bTabElement, B2bTabEvents>({
    tagName: 'b2b-tab',
    elementClass: B2bTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bChange: 'b2b-change' } as B2bTabEvents,
    defineCustomElement: defineB2bTab
});

type B2bTabGroupEvents = { onB2bSelected: EventName<B2bTabGroupCustomEvent<TabChangeEventDetail>> };

export const B2bTabGroup: StencilReactComponent<B2bTabGroupElement, B2bTabGroupEvents> = /*@__PURE__*/ createComponent<B2bTabGroupElement, B2bTabGroupEvents>({
    tagName: 'b2b-tab-group',
    elementClass: B2bTabGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bTabGroupEvents,
    defineCustomElement: defineB2bTabGroup
});

type B2bTabPanelEvents = NonNullable<unknown>;

export const B2bTabPanel: StencilReactComponent<B2bTabPanelElement, B2bTabPanelEvents> = /*@__PURE__*/ createComponent<B2bTabPanelElement, B2bTabPanelEvents>({
    tagName: 'b2b-tab-panel',
    elementClass: B2bTabPanelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bTabPanelEvents,
    defineCustomElement: defineB2bTabPanel
});

type B2bTableEvents = { onB2bSortChange: EventName<B2bTableCustomEvent<ColumnSortChangeEventDetail>> };

export const B2bTable: StencilReactComponent<B2bTableElement, B2bTableEvents> = /*@__PURE__*/ createComponent<B2bTableElement, B2bTableEvents>({
    tagName: 'b2b-table',
    elementClass: B2bTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSortChange: 'b2b-sort-change' } as B2bTableEvents,
    defineCustomElement: defineB2bTable
});

type B2bTableCellEvents = NonNullable<unknown>;

export const B2bTableCell: StencilReactComponent<B2bTableCellElement, B2bTableCellEvents> = /*@__PURE__*/ createComponent<B2bTableCellElement, B2bTableCellEvents>({
    tagName: 'b2b-table-cell',
    elementClass: B2bTableCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bTableCellEvents,
    defineCustomElement: defineB2bTableCell
});

type B2bTableHeaderEvents = { onB2bChange: EventName<B2bTableHeaderCustomEvent<TableSortDirections>> };

export const B2bTableHeader: StencilReactComponent<B2bTableHeaderElement, B2bTableHeaderEvents> = /*@__PURE__*/ createComponent<B2bTableHeaderElement, B2bTableHeaderEvents>({
    tagName: 'b2b-table-header',
    elementClass: B2bTableHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bChange: 'b2b-change' } as B2bTableHeaderEvents,
    defineCustomElement: defineB2bTableHeader
});

type B2bTableRowEvents = {
    onB2bOpen: EventName<CustomEvent<boolean>>,
    onB2bRowSelected: EventName<B2bTableRowCustomEvent<CheckboxEventDetail>>
};

export const B2bTableRow: StencilReactComponent<B2bTableRowElement, B2bTableRowEvents> = /*@__PURE__*/ createComponent<B2bTableRowElement, B2bTableRowEvents>({
    tagName: 'b2b-table-row',
    elementClass: B2bTableRowElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bOpen: 'b2b-open',
        onB2bRowSelected: 'b2b-row-selected'
    } as B2bTableRowEvents,
    defineCustomElement: defineB2bTableRow
});

type B2bTableRowgroupEvents = { onB2bGroupSelected: EventName<B2bTableRowgroupCustomEvent<TableAccordionSelectedEventDetail>> };

export const B2bTableRowgroup: StencilReactComponent<B2bTableRowgroupElement, B2bTableRowgroupEvents> = /*@__PURE__*/ createComponent<B2bTableRowgroupElement, B2bTableRowgroupEvents>({
    tagName: 'b2b-table-rowgroup',
    elementClass: B2bTableRowgroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bGroupSelected: 'b2b-group-selected' } as B2bTableRowgroupEvents,
    defineCustomElement: defineB2bTableRowgroup
});

type B2bTextareaEvents = {
    onB2bFocus: EventName<B2bTextareaCustomEvent<FocusEvent>>,
    onB2bBlur: EventName<B2bTextareaCustomEvent<FocusEvent>>,
    onB2bInput: EventName<B2bTextareaCustomEvent<InputChangeEvent>>
};

export const B2bTextarea: StencilReactComponent<B2bTextareaElement, B2bTextareaEvents> = /*@__PURE__*/ createComponent<B2bTextareaElement, B2bTextareaEvents>({
    tagName: 'b2b-textarea',
    elementClass: B2bTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onB2bFocus: 'b2b-focus',
        onB2bBlur: 'b2b-blur',
        onB2bInput: 'b2b-input'
    } as B2bTextareaEvents,
    defineCustomElement: defineB2bTextarea
});

type B2bToggleButtonEvents = { onB2bChange: EventName<B2bToggleButtonCustomEvent<ToggleButtonEventDetail>> };

export const B2bToggleButton: StencilReactComponent<B2bToggleButtonElement, B2bToggleButtonEvents> = /*@__PURE__*/ createComponent<B2bToggleButtonElement, B2bToggleButtonEvents>({
    tagName: 'b2b-toggle-button',
    elementClass: B2bToggleButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bChange: 'b2b-change' } as B2bToggleButtonEvents,
    defineCustomElement: defineB2bToggleButton
});

type B2bToggleChipEvents = { onB2bSelected: EventName<B2bToggleChipCustomEvent<ToggleChipEventDetail>> };

export const B2bToggleChip: StencilReactComponent<B2bToggleChipElement, B2bToggleChipEvents> = /*@__PURE__*/ createComponent<B2bToggleChipElement, B2bToggleChipEvents>({
    tagName: 'b2b-toggle-chip',
    elementClass: B2bToggleChipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bSelected: 'b2b-selected' } as B2bToggleChipEvents,
    defineCustomElement: defineB2bToggleChip
});

type B2bToggleGroupEvents = { onB2bGroupChange: EventName<B2bToggleGroupCustomEvent<ToggleButtonEventDetail>> };

export const B2bToggleGroup: StencilReactComponent<B2bToggleGroupElement, B2bToggleGroupEvents> = /*@__PURE__*/ createComponent<B2bToggleGroupElement, B2bToggleGroupEvents>({
    tagName: 'b2b-toggle-group',
    elementClass: B2bToggleGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bGroupChange: 'b2b-group-change' } as B2bToggleGroupEvents,
    defineCustomElement: defineB2bToggleGroup
});

type B2bToggleSwitchEvents = { onB2bChange: EventName<B2bToggleSwitchCustomEvent<ToggleSwitchEventDetail>> };

export const B2bToggleSwitch: StencilReactComponent<B2bToggleSwitchElement, B2bToggleSwitchEvents> = /*@__PURE__*/ createComponent<B2bToggleSwitchElement, B2bToggleSwitchEvents>({
    tagName: 'b2b-toggle-switch',
    elementClass: B2bToggleSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onB2bChange: 'b2b-change' } as B2bToggleSwitchEvents,
    defineCustomElement: defineB2bToggleSwitch
});

type B2bTooltipEvents = NonNullable<unknown>;

export const B2bTooltip: StencilReactComponent<B2bTooltipElement, B2bTooltipEvents> = /*@__PURE__*/ createComponent<B2bTooltipElement, B2bTooltipEvents>({
    tagName: 'b2b-tooltip',
    elementClass: B2bTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bTooltipEvents,
    defineCustomElement: defineB2bTooltip
});

type B2bWizardEvents = NonNullable<unknown>;

export const B2bWizard: StencilReactComponent<B2bWizardElement, B2bWizardEvents> = /*@__PURE__*/ createComponent<B2bWizardElement, B2bWizardEvents>({
    tagName: 'b2b-wizard',
    elementClass: B2bWizardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bWizardEvents,
    defineCustomElement: defineB2bWizard
});

type B2bWizardIconEvents = NonNullable<unknown>;

export const B2bWizardIcon: StencilReactComponent<B2bWizardIconElement, B2bWizardIconEvents> = /*@__PURE__*/ createComponent<B2bWizardIconElement, B2bWizardIconEvents>({
    tagName: 'b2b-wizard-icon',
    elementClass: B2bWizardIconElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bWizardIconEvents,
    defineCustomElement: defineB2bWizardIcon
});

type B2bWizardStepEvents = NonNullable<unknown>;

export const B2bWizardStep: StencilReactComponent<B2bWizardStepElement, B2bWizardStepEvents> = /*@__PURE__*/ createComponent<B2bWizardStepElement, B2bWizardStepEvents>({
    tagName: 'b2b-wizard-step',
    elementClass: B2bWizardStepElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as B2bWizardStepEvents,
    defineCustomElement: defineB2bWizardStep
});
